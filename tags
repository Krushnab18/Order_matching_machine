!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/krushna/DSA-PROJECT/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(SRC_DIR)\/%.c$/;"	t
$(OBJ_DIR)/main.o	Makefile	/^$(OBJ_DIR)\/main.o: main.c$/;"	t
$(TARGET)	Makefile	/^$(TARGET): $(OBJ_FILES) $(OBJ_MAIN)$/;"	t
AVL_TREE	src/include/avl_tree.h	/^#define AVL_TREE$/;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -std=c11 -g$/;"	m
DISPLAY_H	src/include/display.h	/^#define DISPLAY_H$/;"	d
FILE_IO	src/include/file_io.h	/^#define FILE_IO$/;"	d
GENERATE_ORDER_H	src/include/generate_order.h	/^#define GENERATE_ORDER_H$/;"	d
INCLUDE_DIR	Makefile	/^INCLUDE_DIR = src\/include$/;"	m
MATCHING_H	src/include/matching.h	/^#define MATCHING_H$/;"	d
MAX_LINE_LENGTH	src/main/file_io.c	/^#define MAX_LINE_LENGTH /;"	d	file:
Node	src/include/avl_tree.h	/^typedef struct Node{$/;"	s
Node	src/include/avl_tree.h	/^}Node;$/;"	t	typeref:struct:Node
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
OBJ_FILES	Makefile	/^OBJ_FILES := $(patsubst $(SRC_DIR)\/%.c, $(OBJ_DIR)\/%.o, $(SRC_FILES))$/;"	m
OBJ_MAIN	Makefile	/^OBJ_MAIN = $(OBJ_DIR)\/main.o$/;"	m
ORDERBOOK_H	src/include/order_book.h	/^#define ORDERBOOK_H$/;"	d
ORDER_H	src/include/order.h	/^#define ORDER_H$/;"	d
Order	src/include/order.h	/^typedef struct Order {$/;"	s
Order	src/include/order.h	/^} Order;$/;"	t	typeref:struct:Order
Order_book	src/include/order_book.h	/^typedef orderNode* Order_book;$/;"	t	typeref:typename:orderNode *
SRC_DIR	Makefile	/^SRC_DIR = src\/main$/;"	m
SRC_FILES	Makefile	/^SRC_FILES := $(wildcard $(SRC_DIR)\/*.c)$/;"	m
TARGET	Makefile	/^TARGET = sim$/;"	m
addorder_to_orderBook	src/main/order_book.c	/^void addorder_to_orderBook(Order_book *orderBook, Order *buy, Order *sell) {$/;"	f	typeref:typename:void
all	Makefile	/^all: $(TARGET)$/;"	t
buyOrder	src/include/order_book.h	/^    Order *buyOrder, *sellOrder;$/;"	m	struct:orderNode	typeref:typename:Order *
buy_order_avl	src/include/avl_tree.h	/^typedef struct buy_order_avl{$/;"	s
buy_order_avl	src/include/avl_tree.h	/^}buy_order_avl;$/;"	t	typeref:struct:buy_order_avl
clean	Makefile	/^clean:$/;"	t
compareOrders	src/main/order.c	/^int compareOrders(const Order* order1, const Order* order2) {$/;"	f	typeref:typename:int
convert_to_timeval	obj/main.c	/^void convert_to_timeval(const char *time_str, struct timeval *tv) {$/;"	f	typeref:typename:void
convert_to_timeval	src/main/file_io.c	/^void convert_to_timeval(const char *time_str, struct timeval *tv) {$/;"	f	typeref:typename:void
createNode	src/main/avl_tree.c	/^Node *createNode(Order *order) {$/;"	f	typeref:typename:Node *
create_new_order	src/main/order.c	/^Order *create_new_order(long long order_id, int quantity, double price, char side) {$/;"	f	typeref:typename:Order *
delete_buy_order	src/main/avl_tree.c	/^int delete_buy_order(buy_order_avl *t, Order *order, Node **n) {$/;"	f	typeref:typename:int
delete_leaf_node	src/main/avl_tree.c	/^int delete_leaf_node(Node **node) {$/;"	f	typeref:typename:int
delete_one_child_node	src/main/avl_tree.c	/^int delete_one_child_node(Node **node) {$/;"	f	typeref:typename:int
delete_sell_order	src/main/avl_tree.c	/^int delete_sell_order(sell_order_avl *t, Order *order, Node **n) {$/;"	f	typeref:typename:int
delete_two_children_node	src/main/avl_tree.c	/^int delete_two_children_node(Node *node) {$/;"	f	typeref:typename:int
display_matched_order	src/main/order_book.c	/^void display_matched_order(Order_book *orderBook) {$/;"	f	typeref:typename:void
generate_random_price	obj/main.c	/^double generate_random_price() {$/;"	f	typeref:typename:double
generate_random_quantity	obj/main.c	/^int generate_random_quantity() {$/;"	f	typeref:typename:int
getBalance	src/main/avl_tree.c	/^int getBalance(Node *node) {$/;"	f	typeref:typename:int
getHeight	src/main/avl_tree.c	/^int getHeight(Node *node) {$/;"	f	typeref:typename:int
height	src/include/avl_tree.h	/^    int height;$/;"	m	struct:Node	typeref:typename:int
init_buy_order_avl	src/main/avl_tree.c	/^void init_buy_order_avl(buy_order_avl *t) {$/;"	f	typeref:typename:void
init_order_book	src/main/order_book.c	/^void init_order_book(Order_book *order_book) {$/;"	f	typeref:typename:void
init_sell_order_avl	src/main/avl_tree.c	/^void init_sell_order_avl(sell_order_avl *t) {$/;"	f	typeref:typename:void
inorder_buy_order	src/main/avl_tree.c	/^void inorder_buy_order(Node *node) {$/;"	f	typeref:typename:void
inorder_sell_order	src/main/avl_tree.c	/^void inorder_sell_order(Node *node) {$/;"	f	typeref:typename:void
insert_buy_order	src/main/avl_tree.c	/^void insert_buy_order(buy_order_avl *t, Order *order) {$/;"	f	typeref:typename:void
insert_buy_order_recursive	src/main/avl_tree.c	/^Node* insert_buy_order_recursive(Node *node, Order *order, buy_order_avl *t) {$/;"	f	typeref:typename:Node *
insert_sell_order	src/main/avl_tree.c	/^void insert_sell_order(sell_order_avl *t, Order *order) {$/;"	f	typeref:typename:void
insert_sell_order_recursive	src/main/avl_tree.c	/^Node* insert_sell_order_recursive(Node *node, Order *order, sell_order_avl *t) {$/;"	f	typeref:typename:Node *
lchild	src/include/avl_tree.h	/^    struct Node *lchild, *rchild;$/;"	m	struct:Node	typeref:struct:Node *
main	main.c	/^int main() {$/;"	f	typeref:typename:int
main	obj/main.c	/^int main() {$/;"	f	typeref:typename:int
matching_fifo	src/main/matching.c	/^void matching_fifo(buy_order_avl *buy_tree, sell_order_avl *sell_tree, Order *new_order, Order_b/;"	f	typeref:typename:void
max	src/main/avl_tree.c	/^int max(int a, int b) {$/;"	f	typeref:typename:int
max_order	src/include/avl_tree.h	/^    Order *max_order;$/;"	m	struct:buy_order_avl	typeref:typename:Order *
min_order	src/include/avl_tree.h	/^    Order *min_order;$/;"	m	struct:sell_order_avl	typeref:typename:Order *
next	src/include/order_book.h	/^    struct orderNode *next;$/;"	m	struct:orderNode	typeref:struct:orderNode *
openFile	src/main/file_io.c	/^void openFile(FILE *fp, const char *fileName) {$/;"	f	typeref:typename:void
order	src/include/avl_tree.h	/^    Order *order;$/;"	m	struct:Node	typeref:typename:Order *
orderNode	src/include/order_book.h	/^typedef struct orderNode {$/;"	s
orderNode	src/include/order_book.h	/^} orderNode;$/;"	t	typeref:struct:orderNode
order_id	src/include/order.h	/^    long long order_id;$/;"	m	struct:Order	typeref:typename:long long
price	src/include/order.h	/^    double price;$/;"	m	struct:Order	typeref:typename:double
print_order	src/main/order.c	/^void print_order(const Order order) {$/;"	f	typeref:typename:void
quantity	src/include/order.h	/^    int quantity;$/;"	m	struct:Order	typeref:typename:int
rchild	src/include/avl_tree.h	/^    struct Node *lchild, *rchild;$/;"	m	struct:Node	typeref:struct:Node *
readcsv	src/main/file_io.c	/^void readcsv(const char *filename, sell_order_avl *sell_tree, buy_order_avl *buy_tree, Order_boo/;"	f	typeref:typename:void
rebalance	src/main/avl_tree.c	/^Node* rebalance(Node *node) {$/;"	f	typeref:typename:Node *
rebuild	Makefile	/^rebuild: clean all$/;"	t
root	src/include/avl_tree.h	/^    Node *root;$/;"	m	struct:buy_order_avl	typeref:typename:Node *
root	src/include/avl_tree.h	/^    Node *root;$/;"	m	struct:sell_order_avl	typeref:typename:Node *
rotateLeft	src/main/avl_tree.c	/^Node* rotateLeft(Node *x) {$/;"	f	typeref:typename:Node *
rotateRight	src/main/avl_tree.c	/^Node* rotateRight(Node *y) {$/;"	f	typeref:typename:Node *
search	src/main/avl_tree.c	/^Order *search(buy_order_avl *t, long long order_id, double price) {$/;"	f	typeref:typename:Order *
search_sell	src/main/avl_tree.c	/^Order *search_sell(sell_order_avl *t, long long order_id, double price) {$/;"	f	typeref:typename:Order *
sellOrder	src/include/order_book.h	/^    Order *buyOrder, *sellOrder;$/;"	m	struct:orderNode	typeref:typename:Order *
sell_order_avl	src/include/avl_tree.h	/^typedef struct sell_order_avl{$/;"	s
sell_order_avl	src/include/avl_tree.h	/^}sell_order_avl;$/;"	t	typeref:struct:sell_order_avl
side	src/include/order.h	/^    char side;$/;"	m	struct:Order	typeref:typename:char
simulate_order_flow	obj/main.c	/^void simulate_order_flow(sell_order_avl *sell_tree, buy_order_avl *buy_tree, Order_book *order_b/;"	f	typeref:typename:void
time_stamp	src/include/order.h	/^    struct timeval time_stamp; \/\/ Correct type for time_stamp$/;"	m	struct:Order	typeref:struct:timeval
timestamp	src/include/order.h	/^    char timestamp[20];$/;"	m	struct:Order	typeref:typename:char[20]
updateHeight	src/main/avl_tree.c	/^void updateHeight(Node *node) {$/;"	f	typeref:typename:void
writeToCSV	src/main/file_io.c	/^void writeToCSV(FILE *fp, Order *buy, Order *sell) {$/;"	f	typeref:typename:void
